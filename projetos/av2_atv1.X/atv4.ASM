;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICAÇÕES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                    FEVEREIRO DE 2014                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSÃO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRIÇÃO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINIÇÕES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <p12f675.inc>	;ARQUIVO PADRÃO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINAÇÃO DE MEMÓRIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINIÇÃO DE COMANDOS DE USUÁRIO PARA ALTERAÇÃO DA PÁGINA DE MEMÓRIA
#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMÓRIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MAMÓRIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIÁVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DOS NOMES E ENDEREÇOS DE TODAS AS VARIÁVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDEREÇO INICIAL DA MEMÓRIA DE
					;USUÁRIO
		W_TEMP		;REGISTRADORES TEMPORÁRIOS PARA USO
		STATUS_TEMP	;JUNTO ÀS INTERRUPÇÕES
		DADO		;ARMAZENA O DADO PARA A EEPROM

		;NOVAS VARIÁVEIS
		LIM_READ    ;CONTROLA QUANDO DE ELEMENTOS DA MEMÓRIA DEVE SER LIDO OU ESCRITO.
		SWAP_ORD    ;AUXILA NA TROCAR DOS VALORES DE LUGAR NA ORDENÇÃO.
		TEMP	    ;TEMPORÁRIA, AUXILIAR...
		TEMP_ADDR   ;VARIÁVEL QUE AUXILIA NA ORDENAÇÃO SEGURANDO O ENDREÇO DO QUE TIVER O MENOR VALOR (TRABALHA EM CONJUNTO COM TEMP, NA ORDENAÇÃO)
		ORD_ADDR    ;VARÍAVEL QUE QUARDA QUAL ENDEREÇO DO PONTEIRO VAI SER TROCADO AO FIM DE CADA LOOP.
		CRTL_LIM_READ; VARÍAVEL QUE CONTROLA A QUANTIDADE DE ELEMENTOS A CADA LOOP DEVERÁ SER LIDA

	ENDC			;FIM DO BLOCO DE MEMÓRIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA
; INICIALIZAÇÃO DA EEPROM, DE ACORDO COM A DESCRIÇÃO NO ARQUIVO "Def_Rega_Formigas.inc"

;A PARTIR DO ENDEREÇO ZERO DA EEPROM, DADOS EM ORDEM ALEATÓRIA
	ORG 0x2100
	DE	0X89,0X1E,0X39,0X9F,0XC2,0X0C,0XAB,0X33,0X63,0XD3,0X95,0X7B,0X38,0XD6,0X1E,0X48
	DE	0XDB,0XD8,0X86,0XFD,0XA5,0XFC,0X0C,0XBE,0X68,0X9B,0XD9,0X10,0XD8,0XEC,0X90,0X91
	DE	0XAA,0XBB,0XCC,0XDD,0XEE,0XF1,0XC9,0X77

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAÍDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINIÇÃO DE TODOS OS PINOS QUE SERÃO UTILIZADOS COMO SAÍDA
; RECOMENDAMOS TAMBÉM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDEREÇO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INÍCIO DA INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDEREÇO DE DESVIO DAS INTERRUPÇÕES. A PRIMEIRA TAREFA É SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERAÇÃO FUTURA

	ORG	0x04			;ENDEREÇO INICIAL DA INTERRUPÇÃO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPÇÃO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SERÁ ESCRITA AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUPÇÕES

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAÍDA DA INTERRUPÇÃO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUPÇÃO

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRIÇÃO DE FUNCIONAMENTO
; E UM NOME COERENTE ÀS SUAS FUNÇÕES.
LE_EEPROM
;LER DADO DA EEPROM, CUJO ENDEREÇO É INDICADO EM W
;DADO LIDO RETORNA EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR		;INDICA O END. DE LEITURA
	BSF		EECON1,RD	;INICIA O PROCESSO DE LEITURA
	MOVF	EEDATA,W	;COLOCA DADO LIDO EM W
	BANK0				;POSICIONA PARA BANK 0
	RETURN

GRAVA_EEPROM
;ESCREVE DADO (DADO) NA EEPROM, CUJO ENDEREÇO É INDICADO EM W
	ANDLW	.127		;LIMITA ENDEREÇO MAX. 127
	BANK1				;ACESSO VIA BANK 1
	MOVWF	EEADR
	MOVF	DADO,W
	MOVWF	EEDATA
	BSF		EECON1,WREN ;HABILITA ESCRITA
	BCF		INTCON,GIE	;DESLIGA INTERRUPÇÕES
	MOVLW	B'01010101'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	MOVLW	B'10101010'	;DESBLOQUEIA ESCRITA
	MOVWF	EECON2		;
	BSF		EECON1,WR ;INICIA A ESCRITA
AGUARDA
	BTFSC	EECON1,WR ;TERMINOU?
	GOTO	AGUARDA
	BSF		INTCON,GIE ;HABILITA INTERRUPÇÕES
	BANK0				;POSICIONA PARA BANK 0
	RETURN

SUBROTINA1

	;CORPO DA ROTINA

	RETURN

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00000000' ;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
	MOVWF	TRISIO		;COMO SAÍDAS
	CLRF	ANSEL 		;DEFINE PORTAS COMO Digital I/O
	MOVLW	B'00000000'
	MOVWF	OPTION_REG	;DEFINE OPÇÕES DE OPERAÇÃO
	MOVLW	B'00000000'
	MOVWF	INTCON		;DEFINE OPÇÕES DE INTERRUPÇÕES
	BANK0				;RETORNA PARA O BANCO
	MOVLW	B'00000111'
	MOVWF	CMCON		;DEFINE O MODO DE OPERAÇÃO DO COMPARADOR ANALÓGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZAÇÃO DAS VARIÁVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	CLRF	GPIO
	;COMO DEVEMOS SEMPRE LER 40 ELEMENTOS DA MEMÓRIA, A VARIÁVEL É INCIALIZADA COM VALOR DE 40
	MOVLW	D'40'
	MOVWF	LIM_READ
	MOVWF	CRTL_LIM_READ

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
MAIN

	;CORPO DA ROTINA PRINCIPAL
		
	; ***  INCIO DE LEITURA DOS DADOS DA EEPROM ***
	MOVLW	0x30	;MOVE O VALOR 0x30 PARA O W, E ASSIM SET O FSR PARA O ENDERÇO
	MOVWF	FSR	;FSR APONTA PARA O ENDERÇO 0x30
	MOVLW	0x00	;MOVE O VALOR 0, PARA O TEMP, QUE IRA TRABALHAR O ENDEREÇO NA MEMÓRIA EEPROM, NO QUAL INICIA DO ZERO.
	MOVWF	TEMP	;NO MOMENTO, A VARIÁVEL IRA TRABALHAR NA MANIPULAÇÃO DO ENDREÇO NA MEMÓRIA EEPROM
	
NEXT	CALL	LE_EEPROM
	MOVWF	INDF	;MOVE DA EEPROM PRA O ENDEREÇO DA RAM EM QUESTÃO
	INCF	FSR	;ATUALIZA O PONTEIRO PARA O PRÓXIMO ENDEREÇO
	INCF	TEMP	;ATUALIZA O PRÓXIMO ENDEREÇO PRA EEPROM TAMBÉM.
	MOVFW	TEMP	;JOGA O VALOR PRA WORK, ASSIM A FUNÇÃO LE_EEPROM VAI SABER DE ONDE ENDEREÇO LER
	DECFSZ	LIM_READ,F  ;CONTROLA QUANDO DEVE SER LIDO, QUANDO CHEGAR AO ZERO DEVE  SAIR.
	GOTO	NEXT
	
	
	; *** INCIO DAS ROTINAS PARA ORDENAÇÃO ***
	; *** INCIALIZAÇÕES PARA O PRIMEIRO LOOP ***
	BSF	GPIO,GP5    ;GP5 = 1
	MOVLW	0x30	    
	MOVWF	ORD_ADDR    ;SALVA O ENDREÇO DE QUAL VALOR VAI SER TROCADO AO FIM DE CADA LOOP, INCIALMENTE ESSE VALOR É O PRIMEIRO.
	MOVWF	FSR	    ;FSR -> 0x30
	MOVWF	TEMP_ADDR   ;ARMAZENA O ENDEREÇO DO PRIMERO ENDEREÇO, SERA A PRIMEIRA REFERENCIA. AUXILIANDO NAS TROCAS E COMPARAÇÃO
	MOVFW	INDF
	MOVWF	TEMP	    ;ARMAZENA O VALOR DO PRIMEIRO ENDERAÇO DE REFERNECIA EM  TEMP
	MOVLW	D'39'	    ;VALOR A SER ARMAZENADO NO LIMITE DE LEITURA E NO CONTROLE. AQUI É UM A MENOS, PORQUE O ALGORITMO JÁ INICIA DO SEGUNDO.
	MOVWF	LIM_READ    ;LIM_READ = 30d
	MOVWF	CRTL_LIM_READ
	
	
	;*** INICIO DA ORDENAÇÃO DE FATO ***
ORDENAR	INCF	FSR	    ;NOS COMANDO ACIMA, ARMAZEMOS O VALOR DO PRIMERO EM VARIÁVEIS, ENTÃO AQUI INCREMENTAMOS UMA, PRA PODER COMPARAR OS VALORES E SEGUIR ADIANTE
	MOVFW	TEMP	    ;MOVE-SE O VALOR DE TEMP PARA WORK, W = TEMP
	SUBWF	INDF,W	    ;SUBTRAI PARA SABER O MENOR; INDF - W(TEMP) = W
	BTFSS	STATUS,C    ;CASO O BIT DE CARRY, O BIT C, FOR IGUAL A ZERO, ENTÃO ACHOU ALGO MENOR QUE O QUE TÁ EM TEMP E VAI ATUALIZÁ-LO 
	GOTO	ACHOU_MENOR ;CHAMA ROTINA PARA ATUALIAR O TEMP E O TEMP_ADDR PARA O MENOR VALOR NO LOOP ATUAL
	DECFSZ	LIM_READ,F  ;CONTA QUANTOS ELEMENTOS FORAM VERIFICADOS, ELE SUBTRAI A CADA ELEMENTO, AO ZERAR, TERMINAR O LOOP PARA O VALOR EM QUESTÃO
	GOTO	ORDENAR	    ;CASO NÃO TENHA ENCONTRADO NADA MENOR E NÃO TENHA TERMINADO DE ORDENADAR NO MOMENTO, VOLTA AO LOOP
	GOTO	TROCAR	    ;SE CHEGOU AO FINAL DAS COMPARAÇÕES, VAI PARAR ROTINA DE ATUALZAR A LISTA DE ORDENAÇÃO

ACHOU_MENOR	MOVFW	FSR	    ;MOVE O VALOR ATUAL, QUE CORRESPONDE AO DO MENOR VALOR, PARA O W
		MOVWF	TEMP_ADDR   ;ATUALIZA O TEMP_ADDR
		MOVFW	INDF	    ;MOVE O VALOR APONTADO POR FSR
		MOVWF	TEMP	    ;ATUALIZA TEMP
		DECFSZ	LIM_READ,F  ;CONTA QUANTOS ELEMENTOS FORAM VERIFICADOS, ELE SUBTRAI A CADA ELEMENTO, AO ZERAR, TERMINAR O LOOP PARA O VALOR EM QUESTÃO
		GOTO	ORDENAR	    ;VOLTA AO LOOP DE ORDENAÇÃO
	
TROCAR	MOVFW	ORD_ADDR    ;MOVE O PARA W, O ENDEREÇO QUE VAI SER TROCADO 
	MOVWF	FSR	    ;ATUALIZA FSR PARA O ENDREÇO
	MOVFW	INDF	    ;MOVERÁ O VALOR PARA UMA VARIÁVEL DE AJUDA
	MOVWF	SWAP_ORD    ;ARMAZENA O VALOR PARA SER COLOCADO EM OUTRO LUGAR MAIS A FRENTE, ESPECIFICAMENTE, NO ENDEREÇO DE TEMPO.
	MOVFW	TEMP	    ;ATUALIZANDO O NOVO VALOR DO ENDEREÇO ORD_ADDR PARA O MENOR ARMAZENADO EM TEMP
	MOVWF	INDF	    ;ATUAZIZA O VALOR NOVO PARA O ENDREÇO QUE IRA SER SALVO
	
	MOVFW	TEMP_ADDR   ;VAI AO ENDERÇO ONDE A VARIÁVEL DO ENDEREÇO ORD_ADDR VAI SER SALVA AGORA.
	MOVWF	FSR	    ;ATUALIZA O ENDEREÇO.
	MOVFW	SWAP_ORD    ;MOVE O SWAP_ORD
	MOVWF	INDF	    ;SALVA-O EM SUA NOVA POSIÇÃO, POIS ELE É MAIOR QUE O QUE ESTAVA EM TEMP.
	
	
	INCF	ORD_ADDR    ;INCREMENTA UM PARA O ORD_ADDR PARA NOVA REFERENCIA, POIS ELE SERÁ O PRÓXIMO QUE PODERÁ MUDAR DE LUGAR.
	MOVFW	ORD_ADDR    ;SALVA-O NO FSR E TEMP_ADDR QUE VÃO SER AS PRÓXIMAS REFERENCIAS NA ORDENAÇÃO
	MOVWF	TEMP_ADDR
	MOVWF	FSR	
	MOVFW	INDF	    ;MOVE O NOVO VALOR DE REFERENCIA PARA W E ASSIM SALVAR NAS VARIÁVEIS AUXIALERS.
	MOVWF	TEMP
	DECF	CRTL_LIM_READ    ;DIMINUI NO CONTROLE DE ELEMENTOS
	BTFSC	STATUS,Z	 ;SE A OPERAÇÃO ACIMA FOR ZERO, ENTÃO ACABARAM OS ELEMENTOS E É O FIM DA ORDENAÇÃO.
	GOTO	PSEUDO_FIM
	MOVFW	CRTL_LIM_READ	 ;CASO NÃO SEJA O FIM, ATUALIZA O CONTADOR DE ELEMENTOS E VOLTA PRA ORDENAR O RESTANTE DOS VALORES.
	MOVWF	LIM_READ
	GOTO	ORDENAR
	
PSEUDO_FIM
	BCF	GPIO,GP5
	
	; *** ESCREVENDO NA EEPROM ***
	MOVLW	D'40'	;REDEFINE O LIMITE DE LEITURA, QUE TAMBÉM PODE SER ENTENDIDO COMO ESCRITA
	MOVWF	LIM_READ
	MOVLW	0x30	;CONFIGURA O ENDREÇO DE ONDE DEVE COMEÇAR A LER NA MEMÓRIA RAM
	MOVWF	FSR	;SETA O FSR PARA O ENDEREÇO EM QUESTÃO
	MOVFW	INDF	;JÁ PUXA O DADO DO PRIMEIRO ENDEREÇO PARA A VARIÁVEL DADO
	MOVWF	DADO
	MOVLW	0x00	;AJUSTA O ENDERAÇO ONDE SERA ESCREITO NA EEPROM E O DEIXA EM W PARA A FUNÇÃO DE ESCRITA LER DAQUI.
	MOVWF	TEMP

GRAVANDO_EEPROM
	CALL	GRAVA_EEPROM	;CHAMA A FUNÇÃO DE ESCRITA PARA ESCREVER O PRIMEIRO DADO
	INCF	FSR		;ATUALIZA O FSR PARA O PRÓXIMO ENDREÇO
	MOVFW	INDF		;PUXA NOVAMENTE O PRÓXIMO DADO PARA SALVAR NA VARIÁEL DADO.
	CLRF	DADO
	MOVWF	DADO
	INCF	TEMP		;ATUALIZA O TEMP PARA O NOVO ENDEREÇO ONDE DEVERÁ SER SALVO NA PRÓXIMA CHAMADA DO GRAVA_EEPROM
	MOVFW	TEMP		;MOVE-O PARA W, PARA ENTÃO A FUNÇÃO FUNCIONAR CORRETAMENTE
	DECFSZ	LIM_READ,F	;TESTE SE JÁ FORAM LIDOS TODOS.
	GOTO	GRAVANDO_EEPROM
	
	
	

	
FIM
	GOTO	FIM

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
